name: Sonar Analyze

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Sonar Analyze
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full clone to ensure accurate analysis

      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17

      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Gradle packages
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Build and Analyze on Current Branch
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  # Ensure this secret is set in your GitHub repository
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}  # Ensure this secret is set in your GitHub repository
        run: |
          ./gradlew clean build
          ./gradlew sonarqube \
            -Dsonar.projectKey=Test-Code-Quality \
            -Dsonar.projectName='Test Code Quality' \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN

      - name: Check Quality Gate Status
        id: quality_gate_status
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  # Ensure this secret is set in your GitHub repository
        run: |
          # Polling SonarQube for quality gate status
          QUALITY_GATE_STATUS_URL="${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=Test-Code-Quality"
          STATUS=$(curl -s -u $SONAR_TOKEN: "$QUALITY_GATE_STATUS_URL" | jq -r '.projectStatus.status')
          echo "Quality gate status: $STATUS"
          if [ "$STATUS" != "OK" ]; then
            exit 1
          fi
