name: Sonar Analyze

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Sonar Analyze
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full clone to ensure accurate analysis

      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17

      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Gradle packages
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Build and Analyze on Current Branch
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          ./gradlew clean build
          ./gradlew sonar \
            -Dsonar.projectKey=Test-Code-Quality \
            -Dsonar.projectName='Test Code Quality' \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN 

      - name: Checkout main branch
        run: git fetch origin main

      - name: Run SonarQube Analysis on Main Branch
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          git checkout main
          ./gradlew clean build
          ./gradlew sonar \
            -Dsonar.projectKey=Test-Code-Quality \
            -Dsonar.projectName='Test Code Quality' \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.branch.name=main

      - name: Fetch SonarQube Issues for Current Branch
        id: fetch_current_branch_issues
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          curl -s -u $SONAR_TOKEN: \
            "$SONAR_HOST_URL/api/issues/search?projectKeys=Test-Code-Quality&branch=${{ github.head_ref }}&statuses=OPEN" \
            -o current_branch_issues.json

      - name: Fetch SonarQube Issues for Main Branch
        id: fetch_main_branch_issues
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          curl -s -u $SONAR_TOKEN: \
            "$SONAR_HOST_URL/api/issues/search?projectKeys=Test-Code-Quality&branch=main&statuses=OPEN" \
            -o main_branch_issues.json

      - name: Compare Issues and Post PR Comments
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const currentIssues = JSON.parse(fs.readFileSync('current_branch_issues.json'));
            const mainIssues = JSON.parse(fs.readFileSync('main_branch_issues.json'));
            const prNumber = process.env.GITHUB_REF.split('/')[2];
            
            const currentIssuesMap = new Map();
            currentIssues.issues.forEach(issue => {
              currentIssuesMap.set(issue.key, issue);
            });
            
            const mainIssuesMap = new Map();
            mainIssues.issues.forEach(issue => {
              mainIssuesMap.set(issue.key, issue);
            });
            
            let commentBody = `### SonarQube Issues in Current Branch Only\n\n`;
            let foundIssues = false;
            
            currentIssues.issues.forEach(issue => {
              if (!mainIssuesMap.has(issue.key)) {
                commentBody += `- [${issue.rule}](${issue.url}): ${issue.message}\n`;
                foundIssues = true;
              }
            });
            
            if (!foundIssues) {
              commentBody = "No new SonarQube issues found in the current branch.";
            }
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: commentBody
            });
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
