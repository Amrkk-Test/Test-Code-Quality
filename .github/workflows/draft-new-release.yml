
name: "Draft new release"

on:
  workflow_dispatch:
    inputs:
      type:
        type: choice
        options:
          - release
          - hotfix

jobs:
  draft-new-release:
    name: "Draft a new ${{ github.event.inputs.type }}"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.type == 'hotfix' && 'main' || 'develop' }}
      - name: Get version
        id: rawVersion
        run: |
          VERSION=$(awk -F= '$1=="applicationVersion"{print $2}' gradle.properties)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
      - name: Get effective version
        id: versioning
        uses: actions/github-script@v6
        with:
          script: |
            // strip the snapshot out
            let version = "${{ steps.rawVersion.outputs.version }}".replace("-SNAPSHOT", "");
            if (!version.match(/^\d+\.\d+\.\d+$/)) {
              core.setFailed("Version must follow form x.y.z but was :" + version);
            }
            // hotfixes bump the 'patch' value
            if ("${{ github.event.inputs.type }}" == "hotfix") {
              const pieces = version.split(".");
              version = pieces[0] + "." + pieces[1] + "." + (parseInt(pieces[2]) + 1);
            }
            core.setOutput('version', version);
      - name: Create branch ${{ github.event.inputs.type }}/${{ steps.versioning.outputs.version }}
        id: make-commit
        run: |
          # set generic committer info
          git config user.name "TripleLift Deployer"
          git config user.email "tldeployer@users.noreply.github.com"
          # checkout the new branch
          git checkout -b ${{ github.event.inputs.type }}/${{ steps.versioning.outputs.version }}
          # set the version here
          sed -i -e "/applicationVersion=/ s/=.*/=${{ steps.versioning.outputs.version }}/" gradle.properties
          # commit the change
          git commit -a -m "[automated] Prepare for ${{ github.event.inputs.type }} ${{ steps.versioning.outputs.version }}"
          echo "previous_tag_name=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT
          echo "commit=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          # push
          git push origin ${{ github.event.inputs.type }}/${{ steps.versioning.outputs.version }}
      - name: Generate release checklist
        id: releaseChecklist
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            const { data } = await github.request(
              'POST /repos/{owner}/{repo}/releases/generate-notes', {
                owner: "${{ github.repository_owner }}",
                repo: "${{ github.event.repository.name }}",
                tag_name: "${{ steps.versioning.outputs.version }}",
                target_commitish: "${{ steps.make-commit.outputs.commit }}",
                previous_tag_name: "${{ steps.make-commit.outputs.previous_tag_name }}"
                }
            );
            const contributors = {};
            const out = data.body.split("\n").filter(x => x.startsWith("* ") && x.indexOf("@dependabot") <= 0 && x.indexOf("made their first contribution") <= 0).map(x => {
              const match = x.match(/by @(\S+)/);
              if (match) {
                contributors[match[1]] = 1;
              }
              return x.replace(/^\* /, "* [ ] ");
            }).join("\n");
            // remove members outside of org
            delete contributors["tldeployer"];
            delete contributors["dependabot"];
            delete contributors["github-actions"];
            core.setOutput('reviewers', Object.keys(contributors).join(", "));
            return out;
      - name: Create pull request
        uses: thomaseizinger/create-pull-request@1.2.2
        env:
          GITHUB_TOKEN: ${{ secrets.GH_ORG_TOKEN }}
        with:
          head: ${{ github.event.inputs.type }}/${{ steps.versioning.outputs.version }}
          base: main
          labels: Automation, ${{ github.event.inputs.type == 'hotfix' && 'Hotfix' || 'Release'}}
          title: "Automation: Release ${{ steps.versioning.outputs.version }}${{ github.event.inputs.type == 'hotfix' && ' (Hotfix)' || '' }}"
          reviewers: ${{ steps.releaseChecklist.outputs.reviewers }}
          draft: ${{ github.event.inputs.type == 'hotfix' }}
          body: |
            Hi @${{ github.actor }}!
            This PR was created in response to a manual trigger of the release workflow here: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}.
            The version was bumped in ${{ steps.make-commit.outputs.commit }}.
            ${{ github.event.inputs.type == 'hotfix' && 'Please push your hotfixes onto the branch in this draft PR.' || ''}}
            Merging this PR will create a GitHub release.
            
            # Release Checklist
            
            _After verifying your changes in our QA/staging environment, please **check off** your changes below. Once all of your items are checked off, please **approve** this PR to indicate this release is ready to ship._
            
            ${{ steps.releaseChecklist.outputs.result }}
